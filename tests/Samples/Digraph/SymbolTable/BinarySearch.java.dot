digraph BinarySearch {
"0x6110000002e8" [label=BS shape=diamond]
"0x612000000c68" [label="int Init(int, )" shape=box]
"0x60b000000ed8" [label="int : sz"]
"0x612000000c68" -> "0x60b000000ed8"
"0x60b000001198" [label="int : aux01"]
"0x612000000c68" -> "0x60b000001198"
"0x60b0000010e8" [label="int : aux02"]
"0x612000000c68" -> "0x60b0000010e8"
"0x60b000000f88" [label="int : j"]
"0x612000000c68" -> "0x60b000000f88"
"0x60b000001038" [label="int : k"]
"0x612000000c68" -> "0x60b000001038"
"0x6110000002e8" -> "0x612000000c68"
"0x612000000ae8" [label="int Print()" shape=box]
"0x60b000000e28" [label="int : j"]
"0x612000000ae8" -> "0x60b000000e28"
"0x6110000002e8" -> "0x612000000ae8"
"0x612000000968" [label="boolean Compare(int, int, )" shape=box]
"0x60b000000c18" [label="int : num2"]
"0x612000000968" -> "0x60b000000c18"
"0x60b000000b68" [label="int : num1"]
"0x612000000968" -> "0x60b000000b68"
"0x60b000000d78" [label="int : aux02"]
"0x612000000968" -> "0x60b000000d78"
"0x60b000000cc8" [label="boolean : retval"]
"0x612000000968" -> "0x60b000000cc8"
"0x6110000002e8" -> "0x612000000968"
"0x6120000007e8" [label="int Div(int, )" shape=box]
"0x60b0000008a8" [label="int : num"]
"0x6120000007e8" -> "0x60b0000008a8"
"0x60b000000ab8" [label="int : aux03"]
"0x6120000007e8" -> "0x60b000000ab8"
"0x60b000000958" [label="int : count01"]
"0x6120000007e8" -> "0x60b000000958"
"0x60b000000a08" [label="int : count02"]
"0x6120000007e8" -> "0x60b000000a08"
"0x6110000002e8" -> "0x6120000007e8"
"0x6120000004e8" [label="int Start(int, )" shape=box]
"0x60b000000118" [label="int : sz"]
"0x6120000004e8" -> "0x60b000000118"
"0x60b000000278" [label="int : aux02"]
"0x6120000004e8" -> "0x60b000000278"
"0x60b0000001c8" [label="int : aux01"]
"0x6120000004e8" -> "0x60b0000001c8"
"0x6110000002e8" -> "0x6120000004e8"
"0x612000000668" [label="boolean Search(int, )" shape=box]
"0x60b000000328" [label="int : num"]
"0x612000000668" -> "0x60b000000328"
"0x60b0000007f8" [label="int : nt"]
"0x612000000668" -> "0x60b0000007f8"
"0x60b000000488" [label="int : right"]
"0x612000000668" -> "0x60b000000488"
"0x60b0000003d8" [label="boolean : bs01"]
"0x612000000668" -> "0x60b0000003d8"
"0x60b0000005e8" [label="boolean : var_cont"]
"0x612000000668" -> "0x60b0000005e8"
"0x60b000000698" [label="int : medium"]
"0x612000000668" -> "0x60b000000698"
"0x60b000000538" [label="int : left"]
"0x612000000668" -> "0x60b000000538"
"0x60b000000748" [label="int : aux01"]
"0x612000000668" -> "0x60b000000748"
"0x6110000002e8" -> "0x612000000668"
"0x60b0000012f8" [label="int : size"]
"0x6110000002e8" -> "0x60b0000012f8"
"0x60b000001248" [label="int[] : number"]
"0x6110000002e8" -> "0x60b000001248"
"0x6110000001a8" [label=BinarySearch shape=diamond]
"0x612000000368" [label="void main(String[], )" shape=box]
"0x60b000000068" [label="String[] : a"]
"0x612000000368" -> "0x60b000000068"
"0x6110000001a8" -> "0x612000000368"
}
